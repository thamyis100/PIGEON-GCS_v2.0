<<<<<<< HEAD
/* This file is automatically generated. Any changes made to it may be overwritten. */

using System;
using System.IO;
using System.Collections.Generic;

namespace MavLinkNet
{

    /// <summary>
    /// Micro air vehicle / autopilot classes. This identifies the individual model.
    /// </summary>
    public enum MavAutopilot { 

        /// <summary> Generic autopilot, full support for everything </summary>
        Generic = 0, 

        /// <summary> Reserved for future use. </summary>
        Reserved = 1, 

        /// <summary> SLUGS autopilot, http://slugsuav.soe.ucsc.edu </summary>
        Slugs = 2, 

        /// <summary> ArduPilot - Plane/Copter/Rover/Sub/Tracker, https://ardupilot.org </summary>
        Ardupilotmega = 3, 

        /// <summary> OpenPilot, http://openpilot.org </summary>
        Openpilot = 4, 

        /// <summary> Generic autopilot only supporting simple waypoints </summary>
        GenericWaypointsOnly = 5, 

        /// <summary> Generic autopilot supporting waypoints and other simple navigation commands </summary>
        GenericWaypointsAndSimpleNavigationOnly = 6, 

        /// <summary> Generic autopilot supporting the full mission command set </summary>
        GenericMissionFull = 7, 

        /// <summary> No valid autopilot, e.g. a GCS or other MAVLink component </summary>
        Invalid = 8, 

        /// <summary> PPZ UAV - http://nongnu.org/paparazzi </summary>
        Ppz = 9, 

        /// <summary> UAV Dev Board </summary>
        Udb = 10, 

        /// <summary> FlexiPilot </summary>
        Fp = 11, 

        /// <summary> PX4 Autopilot - http://px4.io/ </summary>
        Px4 = 12, 

        /// <summary> SMACCMPilot - http://smaccmpilot.org </summary>
        Smaccmpilot = 13, 

        /// <summary> AutoQuad -- http://autoquad.org </summary>
        Autoquad = 14, 

        /// <summary> Armazila -- http://armazila.com </summary>
        Armazila = 15, 

        /// <summary> Aerob -- http://aerob.ru </summary>
        Aerob = 16, 

        /// <summary> ASLUAV autopilot -- http://www.asl.ethz.ch </summary>
        Asluav = 17, 

        /// <summary> SmartAP Autopilot - http://sky-drones.com </summary>
        Smartap = 18, 

        /// <summary> AirRails - http://uaventure.com </summary>
        Airrails = 19 };

    /// <summary>
    /// MAVLINK component type reported in HEARTBEAT message. Flight controllers must report the type of the vehicle on which they are mounted (e.g. MAV_TYPE_OCTOROTOR). All other components must report a value appropriate for their type (e.g. a camera must use MAV_TYPE_CAMERA).
    /// </summary>
    public enum MavType { 

        /// <summary> Generic micro air vehicle </summary>
        Generic = 0, 

        /// <summary> Fixed wing aircraft. </summary>
        FixedWing = 1, 

        /// <summary> Quadrotor </summary>
        Quadrotor = 2, 

        /// <summary> Coaxial helicopter </summary>
        Coaxial = 3, 

        /// <summary> Normal helicopter with tail rotor. </summary>
        Helicopter = 4, 

        /// <summary> Ground installation </summary>
        AntennaTracker = 5, 

        /// <summary> Operator control unit / ground control station </summary>
        Gcs = 6, 

        /// <summary> Airship, controlled </summary>
        Airship = 7, 

        /// <summary> Free balloon, uncontrolled </summary>
        FreeBalloon = 8, 

        /// <summary> Rocket </summary>
        Rocket = 9, 

        /// <summary> Ground rover </summary>
        GroundRover = 10, 

        /// <summary> Surface vessel, boat, ship </summary>
        SurfaceBoat = 11, 

        /// <summary> Submarine </summary>
        Submarine = 12, 

        /// <summary> Hexarotor </summary>
        Hexarotor = 13, 

        /// <summary> Octorotor </summary>
        Octorotor = 14, 

        /// <summary> Tricopter </summary>
        Tricopter = 15, 

        /// <summary> Flapping wing </summary>
        FlappingWing = 16, 

        /// <summary> Kite </summary>
        Kite = 17, 

        /// <summary> Onboard companion controller </summary>
        OnboardController = 18, 

        /// <summary> Two-rotor VTOL using control surfaces in vertical operation in addition. Tailsitter. </summary>
        VtolDuorotor = 19, 

        /// <summary> Quad-rotor VTOL using a V-shaped quad config in vertical operation. Tailsitter. </summary>
        VtolQuadrotor = 20, 

        /// <summary> Tiltrotor VTOL </summary>
        VtolTiltrotor = 21, 

        /// <summary> VTOL reserved 2 </summary>
        VtolReserved2 = 22, 

        /// <summary> VTOL reserved 3 </summary>
        VtolReserved3 = 23, 

        /// <summary> VTOL reserved 4 </summary>
        VtolReserved4 = 24, 

        /// <summary> VTOL reserved 5 </summary>
        VtolReserved5 = 25, 

        /// <summary> Gimbal </summary>
        Gimbal = 26, 

        /// <summary> ADSB system </summary>
        Adsb = 27, 

        /// <summary> Steerable, nonrigid airfoil </summary>
        Parafoil = 28, 

        /// <summary> Dodecarotor </summary>
        Dodecarotor = 29, 

        /// <summary> Camera </summary>
        Camera = 30, 

        /// <summary> Charging station </summary>
        ChargingStation = 31, 

        /// <summary> FLARM collision avoidance system </summary>
        Flarm = 32, 

        /// <summary> Servo </summary>
        Servo = 33, 

        /// <summary> Open Drone ID. See https://mavlink.io/en/services/opendroneid.html. </summary>
        Odid = 34, 

        /// <summary> Decarotor </summary>
        Decarotor = 35 };

    /// <summary>
    /// These flags encode the MAV mode.
    /// </summary>
    public enum MavModeFlag { 

        /// <summary> 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state. </summary>
        SafetyArmed = 128, 

        /// <summary> 0b01000000 remote control input is enabled. </summary>
        ManualInputEnabled = 64, 

        /// <summary> 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational. </summary>
        HilEnabled = 32, 

        /// <summary> 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around. </summary>
        StabilizeEnabled = 16, 

        /// <summary> 0b00001000 guided mode enabled, system flies waypoints / mission items. </summary>
        GuidedEnabled = 8, 

        /// <summary> 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation. </summary>
        AutoEnabled = 4, 

        /// <summary> 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations. </summary>
        TestEnabled = 2, 

        /// <summary> 0b00000001 Reserved for future use. </summary>
        CustomModeEnabled = 1 };

    /// <summary>
    /// These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not.
    /// </summary>
    public enum MavModeFlagDecodePosition { 

        /// <summary> First bit:  10000000 </summary>
        Safety = 128, 

        /// <summary> Second bit: 01000000 </summary>
        Manual = 64, 

        /// <summary> Third bit:  00100000 </summary>
        Hil = 32, 

        /// <summary> Fourth bit: 00010000 </summary>
        Stabilize = 16, 

        /// <summary> Fifth bit:  00001000 </summary>
        Guided = 8, 

        /// <summary> Sixth bit:   00000100 </summary>
        Auto = 4, 

        /// <summary> Seventh bit: 00000010 </summary>
        Test = 2, 

        /// <summary> Eighth bit: 00000001 </summary>
        CustomMode = 1 };

    public enum MavState { 

        /// <summary> Uninitialized system, state is unknown. </summary>
        Uninit = 0, 

        /// <summary> System is booting up. </summary>
        Boot = 1, 

        /// <summary> System is calibrating and not flight-ready. </summary>
        Calibrating = 2, 

        /// <summary> System is grounded and on standby. It can be launched any time. </summary>
        Standby = 3, 

        /// <summary> System is active and might be already airborne. Motors are engaged. </summary>
        Active = 4, 

        /// <summary> System is in a non-normal flight mode. It can however still navigate. </summary>
        Critical = 5, 

        /// <summary> System is in a non-normal flight mode. It lost control over parts or over the whole airframe. It is in mayday and going down. </summary>
        Emergency = 6, 

        /// <summary> System just initialized its power-down sequence, will shut down now. </summary>
        Poweroff = 7, 

        /// <summary> System is terminating itself. </summary>
        FlightTermination = 8 };

    /// <summary>
    /// Component ids (values) for the different types and instances of onboard hardware/software that might make up a MAVLink system (autopilot, cameras, servos, GPS systems, avoidance systems etc.).       Components must use the appropriate ID in their source address when sending messages. Components can also use IDs to determine if they are the intended recipient of an incoming message. The MAV_COMP_ID_ALL value is used to indicate messages that must be processed by all components.       When creating new entries, components that can have multiple instances (e.g. cameras, servos etc.) should be allocated sequential values. An appropriate number of values should be left free after these components to allow the number of instances to be expanded.
    /// </summary>
    public enum MavComponent { 

        /// <summary> Target id (target_component) used to broadcast messages to all components of the receiving system. Components should attempt to process messages with this component ID and forward to components on any other interfaces. Note: This is not a valid *source* component id for a message. </summary>
        MavCompIdAll = 0, 

        /// <summary> System flight controller component ('autopilot'). Only one autopilot is expected in a particular system. </summary>
        MavCompIdAutopilot1 = 1, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser1 = 25, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser2 = 26, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser3 = 27, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser4 = 28, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser5 = 29, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser6 = 30, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser7 = 31, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser8 = 32, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser9 = 33, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser10 = 34, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser11 = 35, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser12 = 36, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser13 = 37, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser14 = 38, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser15 = 39, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser16 = 40, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser17 = 41, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser18 = 42, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser19 = 43, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser20 = 44, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser21 = 45, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser22 = 46, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser23 = 47, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser24 = 48, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser25 = 49, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser26 = 50, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser27 = 51, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser28 = 52, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser29 = 53, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser30 = 54, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser31 = 55, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser32 = 56, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser33 = 57, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser34 = 58, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser35 = 59, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser36 = 60, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser37 = 61, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser38 = 62, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser39 = 63, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser40 = 64, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser41 = 65, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser42 = 66, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser43 = 67, 

        /// <summary> Telemetry radio (e.g. SiK radio, or other component that emits RADIO_STATUS messages). </summary>
        MavCompIdTelemetryRadio = 68, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser45 = 69, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser46 = 70, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser47 = 71, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser48 = 72, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser49 = 73, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser50 = 74, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser51 = 75, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser52 = 76, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser53 = 77, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser54 = 78, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser55 = 79, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser56 = 80, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser57 = 81, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser58 = 82, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser59 = 83, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser60 = 84, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser61 = 85, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser62 = 86, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser63 = 87, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser64 = 88, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser65 = 89, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser66 = 90, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser67 = 91, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser68 = 92, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser69 = 93, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser70 = 94, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser71 = 95, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser72 = 96, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser73 = 97, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser74 = 98, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser75 = 99, 

        /// <summary> Camera #1. </summary>
        MavCompIdCamera = 100, 

        /// <summary> Camera #2. </summary>
        MavCompIdCamera2 = 101, 

        /// <summary> Camera #3. </summary>
        MavCompIdCamera3 = 102, 

        /// <summary> Camera #4. </summary>
        MavCompIdCamera4 = 103, 

        /// <summary> Camera #5. </summary>
        MavCompIdCamera5 = 104, 

        /// <summary> Camera #6. </summary>
        MavCompIdCamera6 = 105, 

        /// <summary> Servo #1. </summary>
        MavCompIdServo1 = 140, 

        /// <summary> Servo #2. </summary>
        MavCompIdServo2 = 141, 

        /// <summary> Servo #3. </summary>
        MavCompIdServo3 = 142, 

        /// <summary> Servo #4. </summary>
        MavCompIdServo4 = 143, 

        /// <summary> Servo #5. </summary>
        MavCompIdServo5 = 144, 

        /// <summary> Servo #6. </summary>
        MavCompIdServo6 = 145, 

        /// <summary> Servo #7. </summary>
        MavCompIdServo7 = 146, 

        /// <summary> Servo #8. </summary>
        MavCompIdServo8 = 147, 

        /// <summary> Servo #9. </summary>
        MavCompIdServo9 = 148, 

        /// <summary> Servo #10. </summary>
        MavCompIdServo10 = 149, 

        /// <summary> Servo #11. </summary>
        MavCompIdServo11 = 150, 

        /// <summary> Servo #12. </summary>
        MavCompIdServo12 = 151, 

        /// <summary> Servo #13. </summary>
        MavCompIdServo13 = 152, 

        /// <summary> Servo #14. </summary>
        MavCompIdServo14 = 153, 

        /// <summary> Gimbal #1. </summary>
        MavCompIdGimbal = 154, 

        /// <summary> Logging component. </summary>
        MavCompIdLog = 155, 

        /// <summary> Automatic Dependent Surveillance-Broadcast (ADS-B) component. </summary>
        MavCompIdAdsb = 156, 

        /// <summary> On Screen Display (OSD) devices for video links. </summary>
        MavCompIdOsd = 157, 

        /// <summary> Generic autopilot peripheral component ID. Meant for devices that do not implement the parameter microservice. </summary>
        MavCompIdPeripheral = 158, 

        /// <summary> Gimbal ID for QX1. </summary>
        MavCompIdQx1Gimbal = 159, 

        /// <summary> FLARM collision alert component. </summary>
        MavCompIdFlarm = 160, 

        /// <summary> Gimbal #2. </summary>
        MavCompIdGimbal2 = 171, 

        /// <summary> Gimbal #3. </summary>
        MavCompIdGimbal3 = 172, 

        /// <summary> Gimbal #4 </summary>
        MavCompIdGimbal4 = 173, 

        /// <summary> Gimbal #5. </summary>
        MavCompIdGimbal5 = 174, 

        /// <summary> Gimbal #6. </summary>
        MavCompIdGimbal6 = 175, 

        /// <summary> Component that can generate/supply a mission flight plan (e.g. GCS or developer API). </summary>
        MavCompIdMissionplanner = 190, 

        /// <summary> Component that lives on the onboard computer (companion computer) and has some generic functionalities, such as settings system parameters and monitoring the status of some processes that don't directly speak mavlink and so on. </summary>
        MavCompIdOnboardComputer = 191, 

        /// <summary> Component that finds an optimal path between points based on a certain constraint (e.g. minimum snap, shortest path, cost, etc.). </summary>
        MavCompIdPathplanner = 195, 

        /// <summary> Component that plans a collision free path between two points. </summary>
        MavCompIdObstacleAvoidance = 196, 

        /// <summary> Component that provides position estimates using VIO techniques. </summary>
        MavCompIdVisualInertialOdometry = 197, 

        /// <summary> Component that manages pairing of vehicle and GCS. </summary>
        MavCompIdPairingManager = 198, 

        /// <summary> Inertial Measurement Unit (IMU) #1. </summary>
        MavCompIdImu = 200, 

        /// <summary> Inertial Measurement Unit (IMU) #2. </summary>
        MavCompIdImu2 = 201, 

        /// <summary> Inertial Measurement Unit (IMU) #3. </summary>
        MavCompIdImu3 = 202, 

        /// <summary> GPS #1. </summary>
        MavCompIdGps = 220, 

        /// <summary> GPS #2. </summary>
        MavCompIdGps2 = 221, 

        /// <summary> Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet). </summary>
        MavCompIdOdidTxrx1 = 236, 

        /// <summary> Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet). </summary>
        MavCompIdOdidTxrx2 = 237, 

        /// <summary> Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet). </summary>
        MavCompIdOdidTxrx3 = 238, 

        /// <summary> Component to bridge MAVLink to UDP (i.e. from a UART). </summary>
        MavCompIdUdpBridge = 240, 

        /// <summary> Component to bridge to UART (i.e. from UDP). </summary>
        MavCompIdUartBridge = 241, 

        /// <summary> Component handling TUNNEL messages (e.g. vendor specific GUI of a component). </summary>
        MavCompIdTunnelNode = 242, 

        /// <summary> Component for handling system messages (e.g. to ARM, takeoff, etc.). </summary>
        MavCompIdSystemControl = 250 };

    /// <summary>
    /// Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries
    /// </summary>
    public enum MavCmd { 

        /// <summary> Request the target system(s) emit a single instance of a specified message (i.e. a 'one-shot' version of MAV_CMD_SET_MESSAGE_INTERVAL). </summary>
        RequestMessage = 512 };


    // ___________________________________________________________________________________


    /// <summary>
    /// The heartbeat message shows that a system or component is present and responding. The type and autopilot fields (along with the message component id), allow the receiving system to treat further messages from this system appropriately (e.g. by laying out the user interface based on the autopilot). This microservice is documented at https://mavlink.io/en/services/heartbeat.html
    /// </summary>
    public class UasHeartbeat: UasMessage
    {
        /// <summary>
        /// A bitfield for use for autopilot-specific flags
        /// </summary>
        public UInt32 CustomMode {
            get { return mCustomMode; }
            set { mCustomMode = value; NotifyUpdated(); }
        }

        /// <summary>
        /// Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
        /// </summary>
        public byte Type {
            get { return mType; }
            set { mType = value; NotifyUpdated(); }
        }

        /// <summary>
        /// Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.
        /// </summary>
        public MavAutopilot Autopilot {
            get { return mAutopilot; }
            set { mAutopilot = value; NotifyUpdated(); }
        }

        /// <summary>
        /// System mode bitmap.
        /// </summary>
        public byte BaseMode {
            get { return mBaseMode; }
            set { mBaseMode = value; NotifyUpdated(); }
        }

        /// <summary>
        /// System status flag.
        /// </summary>
        public byte SystemStatus {
            get { return mSystemStatus; }
            set { mSystemStatus = value; NotifyUpdated(); }
        }

        /// <summary>
        /// MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version
        /// </summary>
        public byte MavlinkVersion {
            get { return mMavlinkVersion; }
            set { mMavlinkVersion = value; NotifyUpdated(); }
        }

        public UasHeartbeat()
        {
            mMessageId = 0;
            CrcExtra = 50;
        }

        internal override void SerializeBody(BinaryWriter s)
        {
            s.Write(mCustomMode);
            s.Write(mType);
            s.Write((byte)mAutopilot);
            s.Write(mBaseMode);
            s.Write(mSystemStatus);
            s.Write(mMavlinkVersion);
        }

        internal override void DeserializeBody(BinaryReader s)
        {
            this.mCustomMode = s.ReadUInt32();
            this.mType = s.ReadByte();
            this.mAutopilot = (MavAutopilot)s.ReadByte();
            this.mBaseMode = s.ReadByte();
            this.mSystemStatus = s.ReadByte();
            this.mMavlinkVersion = s.ReadByte();
        }

        protected override void InitMetadata()
        {
            mMetadata = new UasMessageMetadata() {
                Description = "The heartbeat message shows that a system or component is present and responding. The type and autopilot fields (along with the message component id), allow the receiving system to treat further messages from this system appropriately (e.g. by laying out the user interface based on the autopilot). This microservice is documented at https://mavlink.io/en/services/heartbeat.html"
            };

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "CustomMode",
                Description = "A bitfield for use for autopilot-specific flags",
                NumElements = 1,
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "Type",
                Description = "Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.",
                NumElements = 1,
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "Autopilot",
                Description = "Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.",
                NumElements = 1,
                EnumMetadata = UasSummary.GetEnumMetadata("MavAutopilot"),
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "BaseMode",
                Description = "System mode bitmap.",
                NumElements = 1,
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "SystemStatus",
                Description = "System status flag.",
                NumElements = 1,
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "MavlinkVersion",
                Description = "MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version",
                NumElements = 1,
            });

        }

        private UInt32 mCustomMode;
        private byte mType;
        private MavAutopilot mAutopilot;
        private byte mBaseMode;
        private byte mSystemStatus;
        private byte mMavlinkVersion;
    }


    // ___________________________________________________________________________________


    public class UasSummary
    {
        public static UasMessage CreateFromId(byte id)
        {
            switch (id)
            {
               case 0: return new UasHeartbeat();
               default: return null;
            }
        }

        public static byte GetCrcExtraForId(byte id)
        {
            switch (id)
            {
               case 0: return 50;
               default: return 0;
            }
        }
        private static Dictionary<string, UasEnumMetadata> mEnums;

        public static UasEnumMetadata GetEnumMetadata(string enumName)
        {
            if (mEnums == null) InitEnumMetadata();

            return mEnums[enumName];
        }

        private static void InitEnumMetadata()
        {
            UasEnumMetadata en = null;
            UasEnumEntryMetadata ent = null;
            mEnums = new Dictionary<string, UasEnumMetadata>();

            en = new UasEnumMetadata() {
                Name = "MavAutopilot",
                Description = "Micro air vehicle / autopilot classes. This identifies the individual model.",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 0,
                Name = "Generic",
                Description = "Generic autopilot, full support for everything",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "Reserved",
                Description = "Reserved for future use.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "Slugs",
                Description = "SLUGS autopilot, http://slugsuav.soe.ucsc.edu",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 3,
                Name = "Ardupilotmega",
                Description = "ArduPilot - Plane/Copter/Rover/Sub/Tracker, https://ardupilot.org",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "Openpilot",
                Description = "OpenPilot, http://openpilot.org",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 5,
                Name = "GenericWaypointsOnly",
                Description = "Generic autopilot only supporting simple waypoints",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 6,
                Name = "GenericWaypointsAndSimpleNavigationOnly",
                Description = "Generic autopilot supporting waypoints and other simple navigation commands",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 7,
                Name = "GenericMissionFull",
                Description = "Generic autopilot supporting the full mission command set",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "Invalid",
                Description = "No valid autopilot, e.g. a GCS or other MAVLink component",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 9,
                Name = "Ppz",
                Description = "PPZ UAV - http://nongnu.org/paparazzi",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 10,
                Name = "Udb",
                Description = "UAV Dev Board",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 11,
                Name = "Fp",
                Description = "FlexiPilot",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 12,
                Name = "Px4",
                Description = "PX4 Autopilot - http://px4.io/",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 13,
                Name = "Smaccmpilot",
                Description = "SMACCMPilot - http://smaccmpilot.org",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 14,
                Name = "Autoquad",
                Description = "AutoQuad -- http://autoquad.org",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 15,
                Name = "Armazila",
                Description = "Armazila -- http://armazila.com",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 16,
                Name = "Aerob",
                Description = "Aerob -- http://aerob.ru",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 17,
                Name = "Asluav",
                Description = "ASLUAV autopilot -- http://www.asl.ethz.ch",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 18,
                Name = "Smartap",
                Description = "SmartAP Autopilot - http://sky-drones.com",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 19,
                Name = "Airrails",
                Description = "AirRails - http://uaventure.com",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavType",
                Description = "MAVLINK component type reported in HEARTBEAT message. Flight controllers must report the type of the vehicle on which they are mounted (e.g. MAV_TYPE_OCTOROTOR). All other components must report a value appropriate for their type (e.g. a camera must use MAV_TYPE_CAMERA).",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 0,
                Name = "Generic",
                Description = "Generic micro air vehicle",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "FixedWing",
                Description = "Fixed wing aircraft.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "Quadrotor",
                Description = "Quadrotor",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 3,
                Name = "Coaxial",
                Description = "Coaxial helicopter",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "Helicopter",
                Description = "Normal helicopter with tail rotor.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 5,
                Name = "AntennaTracker",
                Description = "Ground installation",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 6,
                Name = "Gcs",
                Description = "Operator control unit / ground control station",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 7,
                Name = "Airship",
                Description = "Airship, controlled",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "FreeBalloon",
                Description = "Free balloon, uncontrolled",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 9,
                Name = "Rocket",
                Description = "Rocket",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 10,
                Name = "GroundRover",
                Description = "Ground rover",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 11,
                Name = "SurfaceBoat",
                Description = "Surface vessel, boat, ship",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 12,
                Name = "Submarine",
                Description = "Submarine",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 13,
                Name = "Hexarotor",
                Description = "Hexarotor",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 14,
                Name = "Octorotor",
                Description = "Octorotor",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 15,
                Name = "Tricopter",
                Description = "Tricopter",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 16,
                Name = "FlappingWing",
                Description = "Flapping wing",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 17,
                Name = "Kite",
                Description = "Kite",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 18,
                Name = "OnboardController",
                Description = "Onboard companion controller",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 19,
                Name = "VtolDuorotor",
                Description = "Two-rotor VTOL using control surfaces in vertical operation in addition. Tailsitter.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 20,
                Name = "VtolQuadrotor",
                Description = "Quad-rotor VTOL using a V-shaped quad config in vertical operation. Tailsitter.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 21,
                Name = "VtolTiltrotor",
                Description = "Tiltrotor VTOL",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 22,
                Name = "VtolReserved2",
                Description = "VTOL reserved 2",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 23,
                Name = "VtolReserved3",
                Description = "VTOL reserved 3",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 24,
                Name = "VtolReserved4",
                Description = "VTOL reserved 4",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 25,
                Name = "VtolReserved5",
                Description = "VTOL reserved 5",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 26,
                Name = "Gimbal",
                Description = "Gimbal",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 27,
                Name = "Adsb",
                Description = "ADSB system",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 28,
                Name = "Parafoil",
                Description = "Steerable, nonrigid airfoil",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 29,
                Name = "Dodecarotor",
                Description = "Dodecarotor",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 30,
                Name = "Camera",
                Description = "Camera",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 31,
                Name = "ChargingStation",
                Description = "Charging station",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 32,
                Name = "Flarm",
                Description = "FLARM collision avoidance system",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 33,
                Name = "Servo",
                Description = "Servo",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 34,
                Name = "Odid",
                Description = "Open Drone ID. See https://mavlink.io/en/services/opendroneid.html.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 35,
                Name = "Decarotor",
                Description = "Decarotor",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavModeFlag",
                Description = "These flags encode the MAV mode.",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 128,
                Name = "SafetyArmed",
                Description = "0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 64,
                Name = "ManualInputEnabled",
                Description = "0b01000000 remote control input is enabled.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 32,
                Name = "HilEnabled",
                Description = "0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 16,
                Name = "StabilizeEnabled",
                Description = "0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "GuidedEnabled",
                Description = "0b00001000 guided mode enabled, system flies waypoints / mission items.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "AutoEnabled",
                Description = "0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "TestEnabled",
                Description = "0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "CustomModeEnabled",
                Description = "0b00000001 Reserved for future use.",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavModeFlagDecodePosition",
                Description = "These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not.",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 128,
                Name = "Safety",
                Description = "First bit:  10000000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 64,
                Name = "Manual",
                Description = "Second bit: 01000000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 32,
                Name = "Hil",
                Description = "Third bit:  00100000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 16,
                Name = "Stabilize",
                Description = "Fourth bit: 00010000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "Guided",
                Description = "Fifth bit:  00001000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "Auto",
                Description = "Sixth bit:   00000100",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "Test",
                Description = "Seventh bit: 00000010",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "CustomMode",
                Description = "Eighth bit: 00000001",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavState",
                Description = "",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 0,
                Name = "Uninit",
                Description = "Uninitialized system, state is unknown.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "Boot",
                Description = "System is booting up.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "Calibrating",
                Description = "System is calibrating and not flight-ready.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 3,
                Name = "Standby",
                Description = "System is grounded and on standby. It can be launched any time.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "Active",
                Description = "System is active and might be already airborne. Motors are engaged.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 5,
                Name = "Critical",
                Description = "System is in a non-normal flight mode. It can however still navigate.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 6,
                Name = "Emergency",
                Description = "System is in a non-normal flight mode. It lost control over parts or over the whole airframe. It is in mayday and going down.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 7,
                Name = "Poweroff",
                Description = "System just initialized its power-down sequence, will shut down now.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "FlightTermination",
                Description = "System is terminating itself.",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavComponent",
                Description = "Component ids (values) for the different types and instances of onboard hardware/software that might make up a MAVLink system (autopilot, cameras, servos, GPS systems, avoidance systems etc.).       Components must use the appropriate ID in their source address when sending messages. Components can also use IDs to determine if they are the intended recipient of an incoming message. The MAV_COMP_ID_ALL value is used to indicate messages that must be processed by all components.       When creating new entries, components that can have multiple instances (e.g. cameras, servos etc.) should be allocated sequential values. An appropriate number of values should be left free after these components to allow the number of instances to be expanded.",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 0,
                Name = "MavCompIdAll",
                Description = "Target id (target_component) used to broadcast messages to all components of the receiving system. Components should attempt to process messages with this component ID and forward to components on any other interfaces. Note: This is not a valid *source* component id for a message.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "MavCompIdAutopilot1",
                Description = "System flight controller component ('autopilot'). Only one autopilot is expected in a particular system.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 25,
                Name = "MavCompIdUser1",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 26,
                Name = "MavCompIdUser2",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 27,
                Name = "MavCompIdUser3",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 28,
                Name = "MavCompIdUser4",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 29,
                Name = "MavCompIdUser5",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 30,
                Name = "MavCompIdUser6",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 31,
                Name = "MavCompIdUser7",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 32,
                Name = "MavCompIdUser8",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 33,
                Name = "MavCompIdUser9",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 34,
                Name = "MavCompIdUser10",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 35,
                Name = "MavCompIdUser11",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 36,
                Name = "MavCompIdUser12",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 37,
                Name = "MavCompIdUser13",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 38,
                Name = "MavCompIdUser14",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 39,
                Name = "MavCompIdUser15",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 40,
                Name = "MavCompIdUser16",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 41,
                Name = "MavCompIdUser17",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 42,
                Name = "MavCompIdUser18",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 43,
                Name = "MavCompIdUser19",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 44,
                Name = "MavCompIdUser20",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 45,
                Name = "MavCompIdUser21",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 46,
                Name = "MavCompIdUser22",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 47,
                Name = "MavCompIdUser23",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 48,
                Name = "MavCompIdUser24",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 49,
                Name = "MavCompIdUser25",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 50,
                Name = "MavCompIdUser26",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 51,
                Name = "MavCompIdUser27",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 52,
                Name = "MavCompIdUser28",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 53,
                Name = "MavCompIdUser29",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 54,
                Name = "MavCompIdUser30",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 55,
                Name = "MavCompIdUser31",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 56,
                Name = "MavCompIdUser32",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 57,
                Name = "MavCompIdUser33",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 58,
                Name = "MavCompIdUser34",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 59,
                Name = "MavCompIdUser35",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 60,
                Name = "MavCompIdUser36",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 61,
                Name = "MavCompIdUser37",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 62,
                Name = "MavCompIdUser38",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 63,
                Name = "MavCompIdUser39",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 64,
                Name = "MavCompIdUser40",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 65,
                Name = "MavCompIdUser41",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 66,
                Name = "MavCompIdUser42",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 67,
                Name = "MavCompIdUser43",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 68,
                Name = "MavCompIdTelemetryRadio",
                Description = "Telemetry radio (e.g. SiK radio, or other component that emits RADIO_STATUS messages).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 69,
                Name = "MavCompIdUser45",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 70,
                Name = "MavCompIdUser46",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 71,
                Name = "MavCompIdUser47",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 72,
                Name = "MavCompIdUser48",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 73,
                Name = "MavCompIdUser49",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 74,
                Name = "MavCompIdUser50",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 75,
                Name = "MavCompIdUser51",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 76,
                Name = "MavCompIdUser52",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 77,
                Name = "MavCompIdUser53",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 78,
                Name = "MavCompIdUser54",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 79,
                Name = "MavCompIdUser55",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 80,
                Name = "MavCompIdUser56",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 81,
                Name = "MavCompIdUser57",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 82,
                Name = "MavCompIdUser58",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 83,
                Name = "MavCompIdUser59",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 84,
                Name = "MavCompIdUser60",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 85,
                Name = "MavCompIdUser61",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 86,
                Name = "MavCompIdUser62",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 87,
                Name = "MavCompIdUser63",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 88,
                Name = "MavCompIdUser64",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 89,
                Name = "MavCompIdUser65",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 90,
                Name = "MavCompIdUser66",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 91,
                Name = "MavCompIdUser67",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 92,
                Name = "MavCompIdUser68",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 93,
                Name = "MavCompIdUser69",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 94,
                Name = "MavCompIdUser70",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 95,
                Name = "MavCompIdUser71",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 96,
                Name = "MavCompIdUser72",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 97,
                Name = "MavCompIdUser73",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 98,
                Name = "MavCompIdUser74",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 99,
                Name = "MavCompIdUser75",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 100,
                Name = "MavCompIdCamera",
                Description = "Camera #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 101,
                Name = "MavCompIdCamera2",
                Description = "Camera #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 102,
                Name = "MavCompIdCamera3",
                Description = "Camera #3.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 103,
                Name = "MavCompIdCamera4",
                Description = "Camera #4.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 104,
                Name = "MavCompIdCamera5",
                Description = "Camera #5.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 105,
                Name = "MavCompIdCamera6",
                Description = "Camera #6.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 140,
                Name = "MavCompIdServo1",
                Description = "Servo #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 141,
                Name = "MavCompIdServo2",
                Description = "Servo #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 142,
                Name = "MavCompIdServo3",
                Description = "Servo #3.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 143,
                Name = "MavCompIdServo4",
                Description = "Servo #4.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 144,
                Name = "MavCompIdServo5",
                Description = "Servo #5.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 145,
                Name = "MavCompIdServo6",
                Description = "Servo #6.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 146,
                Name = "MavCompIdServo7",
                Description = "Servo #7.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 147,
                Name = "MavCompIdServo8",
                Description = "Servo #8.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 148,
                Name = "MavCompIdServo9",
                Description = "Servo #9.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 149,
                Name = "MavCompIdServo10",
                Description = "Servo #10.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 150,
                Name = "MavCompIdServo11",
                Description = "Servo #11.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 151,
                Name = "MavCompIdServo12",
                Description = "Servo #12.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 152,
                Name = "MavCompIdServo13",
                Description = "Servo #13.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 153,
                Name = "MavCompIdServo14",
                Description = "Servo #14.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 154,
                Name = "MavCompIdGimbal",
                Description = "Gimbal #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 155,
                Name = "MavCompIdLog",
                Description = "Logging component.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 156,
                Name = "MavCompIdAdsb",
                Description = "Automatic Dependent Surveillance-Broadcast (ADS-B) component.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 157,
                Name = "MavCompIdOsd",
                Description = "On Screen Display (OSD) devices for video links.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 158,
                Name = "MavCompIdPeripheral",
                Description = "Generic autopilot peripheral component ID. Meant for devices that do not implement the parameter microservice.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 159,
                Name = "MavCompIdQx1Gimbal",
                Description = "Gimbal ID for QX1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 160,
                Name = "MavCompIdFlarm",
                Description = "FLARM collision alert component.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 171,
                Name = "MavCompIdGimbal2",
                Description = "Gimbal #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 172,
                Name = "MavCompIdGimbal3",
                Description = "Gimbal #3.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 173,
                Name = "MavCompIdGimbal4",
                Description = "Gimbal #4",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 174,
                Name = "MavCompIdGimbal5",
                Description = "Gimbal #5.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 175,
                Name = "MavCompIdGimbal6",
                Description = "Gimbal #6.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 190,
                Name = "MavCompIdMissionplanner",
                Description = "Component that can generate/supply a mission flight plan (e.g. GCS or developer API).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 191,
                Name = "MavCompIdOnboardComputer",
                Description = "Component that lives on the onboard computer (companion computer) and has some generic functionalities, such as settings system parameters and monitoring the status of some processes that don't directly speak mavlink and so on.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 195,
                Name = "MavCompIdPathplanner",
                Description = "Component that finds an optimal path between points based on a certain constraint (e.g. minimum snap, shortest path, cost, etc.).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 196,
                Name = "MavCompIdObstacleAvoidance",
                Description = "Component that plans a collision free path between two points.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 197,
                Name = "MavCompIdVisualInertialOdometry",
                Description = "Component that provides position estimates using VIO techniques.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 198,
                Name = "MavCompIdPairingManager",
                Description = "Component that manages pairing of vehicle and GCS.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 200,
                Name = "MavCompIdImu",
                Description = "Inertial Measurement Unit (IMU) #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 201,
                Name = "MavCompIdImu2",
                Description = "Inertial Measurement Unit (IMU) #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 202,
                Name = "MavCompIdImu3",
                Description = "Inertial Measurement Unit (IMU) #3.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 220,
                Name = "MavCompIdGps",
                Description = "GPS #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 221,
                Name = "MavCompIdGps2",
                Description = "GPS #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 236,
                Name = "MavCompIdOdidTxrx1",
                Description = "Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 237,
                Name = "MavCompIdOdidTxrx2",
                Description = "Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 238,
                Name = "MavCompIdOdidTxrx3",
                Description = "Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 240,
                Name = "MavCompIdUdpBridge",
                Description = "Component to bridge MAVLink to UDP (i.e. from a UART).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 241,
                Name = "MavCompIdUartBridge",
                Description = "Component to bridge to UART (i.e. from UDP).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 242,
                Name = "MavCompIdTunnelNode",
                Description = "Component handling TUNNEL messages (e.g. vendor specific GUI of a component).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 250,
                Name = "MavCompIdSystemControl",
                Description = "Component for handling system messages (e.g. to ARM, takeoff, etc.).",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavCmd",
                Description = "Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 512,
                Name = "RequestMessage",
                Description = "Request the target system(s) emit a single instance of a specified message (i.e. a 'one-shot' version of MAV_CMD_SET_MESSAGE_INTERVAL).",
            };
            ent.Params = new List<String>();
            ent.Params.Add("The MAVLink message ID of the requested message.");
            ent.Params.Add("Use for index ID, if required. Otherwise, the use of this parameter (if any) must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("Target address for requested message (if message has target address fields). 0: Flight-stack default, 1: address of requestor, 2: broadcast.");
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
        }
    }

}
=======
/* This file is automatically generated. Any changes made to it may be overwritten. */

using System;
using System.IO;
using System.Collections.Generic;

namespace MavLinkNet
{

    /// <summary>
    /// Micro air vehicle / autopilot classes. This identifies the individual model.
    /// </summary>
    public enum MavAutopilot { 

        /// <summary> Generic autopilot, full support for everything </summary>
        Generic = 0, 

        /// <summary> Reserved for future use. </summary>
        Reserved = 1, 

        /// <summary> SLUGS autopilot, http://slugsuav.soe.ucsc.edu </summary>
        Slugs = 2, 

        /// <summary> ArduPilot - Plane/Copter/Rover/Sub/Tracker, https://ardupilot.org </summary>
        Ardupilotmega = 3, 

        /// <summary> OpenPilot, http://openpilot.org </summary>
        Openpilot = 4, 

        /// <summary> Generic autopilot only supporting simple waypoints </summary>
        GenericWaypointsOnly = 5, 

        /// <summary> Generic autopilot supporting waypoints and other simple navigation commands </summary>
        GenericWaypointsAndSimpleNavigationOnly = 6, 

        /// <summary> Generic autopilot supporting the full mission command set </summary>
        GenericMissionFull = 7, 

        /// <summary> No valid autopilot, e.g. a GCS or other MAVLink component </summary>
        Invalid = 8, 

        /// <summary> PPZ UAV - http://nongnu.org/paparazzi </summary>
        Ppz = 9, 

        /// <summary> UAV Dev Board </summary>
        Udb = 10, 

        /// <summary> FlexiPilot </summary>
        Fp = 11, 

        /// <summary> PX4 Autopilot - http://px4.io/ </summary>
        Px4 = 12, 

        /// <summary> SMACCMPilot - http://smaccmpilot.org </summary>
        Smaccmpilot = 13, 

        /// <summary> AutoQuad -- http://autoquad.org </summary>
        Autoquad = 14, 

        /// <summary> Armazila -- http://armazila.com </summary>
        Armazila = 15, 

        /// <summary> Aerob -- http://aerob.ru </summary>
        Aerob = 16, 

        /// <summary> ASLUAV autopilot -- http://www.asl.ethz.ch </summary>
        Asluav = 17, 

        /// <summary> SmartAP Autopilot - http://sky-drones.com </summary>
        Smartap = 18, 

        /// <summary> AirRails - http://uaventure.com </summary>
        Airrails = 19 };

    /// <summary>
    /// MAVLINK component type reported in HEARTBEAT message. Flight controllers must report the type of the vehicle on which they are mounted (e.g. MAV_TYPE_OCTOROTOR). All other components must report a value appropriate for their type (e.g. a camera must use MAV_TYPE_CAMERA).
    /// </summary>
    public enum MavType { 

        /// <summary> Generic micro air vehicle </summary>
        Generic = 0, 

        /// <summary> Fixed wing aircraft. </summary>
        FixedWing = 1, 

        /// <summary> Quadrotor </summary>
        Quadrotor = 2, 

        /// <summary> Coaxial helicopter </summary>
        Coaxial = 3, 

        /// <summary> Normal helicopter with tail rotor. </summary>
        Helicopter = 4, 

        /// <summary> Ground installation </summary>
        AntennaTracker = 5, 

        /// <summary> Operator control unit / ground control station </summary>
        Gcs = 6, 

        /// <summary> Airship, controlled </summary>
        Airship = 7, 

        /// <summary> Free balloon, uncontrolled </summary>
        FreeBalloon = 8, 

        /// <summary> Rocket </summary>
        Rocket = 9, 

        /// <summary> Ground rover </summary>
        GroundRover = 10, 

        /// <summary> Surface vessel, boat, ship </summary>
        SurfaceBoat = 11, 

        /// <summary> Submarine </summary>
        Submarine = 12, 

        /// <summary> Hexarotor </summary>
        Hexarotor = 13, 

        /// <summary> Octorotor </summary>
        Octorotor = 14, 

        /// <summary> Tricopter </summary>
        Tricopter = 15, 

        /// <summary> Flapping wing </summary>
        FlappingWing = 16, 

        /// <summary> Kite </summary>
        Kite = 17, 

        /// <summary> Onboard companion controller </summary>
        OnboardController = 18, 

        /// <summary> Two-rotor VTOL using control surfaces in vertical operation in addition. Tailsitter. </summary>
        VtolDuorotor = 19, 

        /// <summary> Quad-rotor VTOL using a V-shaped quad config in vertical operation. Tailsitter. </summary>
        VtolQuadrotor = 20, 

        /// <summary> Tiltrotor VTOL </summary>
        VtolTiltrotor = 21, 

        /// <summary> VTOL reserved 2 </summary>
        VtolReserved2 = 22, 

        /// <summary> VTOL reserved 3 </summary>
        VtolReserved3 = 23, 

        /// <summary> VTOL reserved 4 </summary>
        VtolReserved4 = 24, 

        /// <summary> VTOL reserved 5 </summary>
        VtolReserved5 = 25, 

        /// <summary> Gimbal </summary>
        Gimbal = 26, 

        /// <summary> ADSB system </summary>
        Adsb = 27, 

        /// <summary> Steerable, nonrigid airfoil </summary>
        Parafoil = 28, 

        /// <summary> Dodecarotor </summary>
        Dodecarotor = 29, 

        /// <summary> Camera </summary>
        Camera = 30, 

        /// <summary> Charging station </summary>
        ChargingStation = 31, 

        /// <summary> FLARM collision avoidance system </summary>
        Flarm = 32, 

        /// <summary> Servo </summary>
        Servo = 33, 

        /// <summary> Open Drone ID. See https://mavlink.io/en/services/opendroneid.html. </summary>
        Odid = 34, 

        /// <summary> Decarotor </summary>
        Decarotor = 35 };

    /// <summary>
    /// These flags encode the MAV mode.
    /// </summary>
    public enum MavModeFlag { 

        /// <summary> 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state. </summary>
        SafetyArmed = 128, 

        /// <summary> 0b01000000 remote control input is enabled. </summary>
        ManualInputEnabled = 64, 

        /// <summary> 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational. </summary>
        HilEnabled = 32, 

        /// <summary> 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around. </summary>
        StabilizeEnabled = 16, 

        /// <summary> 0b00001000 guided mode enabled, system flies waypoints / mission items. </summary>
        GuidedEnabled = 8, 

        /// <summary> 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation. </summary>
        AutoEnabled = 4, 

        /// <summary> 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations. </summary>
        TestEnabled = 2, 

        /// <summary> 0b00000001 Reserved for future use. </summary>
        CustomModeEnabled = 1 };

    /// <summary>
    /// These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not.
    /// </summary>
    public enum MavModeFlagDecodePosition { 

        /// <summary> First bit:  10000000 </summary>
        Safety = 128, 

        /// <summary> Second bit: 01000000 </summary>
        Manual = 64, 

        /// <summary> Third bit:  00100000 </summary>
        Hil = 32, 

        /// <summary> Fourth bit: 00010000 </summary>
        Stabilize = 16, 

        /// <summary> Fifth bit:  00001000 </summary>
        Guided = 8, 

        /// <summary> Sixth bit:   00000100 </summary>
        Auto = 4, 

        /// <summary> Seventh bit: 00000010 </summary>
        Test = 2, 

        /// <summary> Eighth bit: 00000001 </summary>
        CustomMode = 1 };

    public enum MavState { 

        /// <summary> Uninitialized system, state is unknown. </summary>
        Uninit = 0, 

        /// <summary> System is booting up. </summary>
        Boot = 1, 

        /// <summary> System is calibrating and not flight-ready. </summary>
        Calibrating = 2, 

        /// <summary> System is grounded and on standby. It can be launched any time. </summary>
        Standby = 3, 

        /// <summary> System is active and might be already airborne. Motors are engaged. </summary>
        Active = 4, 

        /// <summary> System is in a non-normal flight mode. It can however still navigate. </summary>
        Critical = 5, 

        /// <summary> System is in a non-normal flight mode. It lost control over parts or over the whole airframe. It is in mayday and going down. </summary>
        Emergency = 6, 

        /// <summary> System just initialized its power-down sequence, will shut down now. </summary>
        Poweroff = 7, 

        /// <summary> System is terminating itself. </summary>
        FlightTermination = 8 };

    /// <summary>
    /// Component ids (values) for the different types and instances of onboard hardware/software that might make up a MAVLink system (autopilot, cameras, servos, GPS systems, avoidance systems etc.).       Components must use the appropriate ID in their source address when sending messages. Components can also use IDs to determine if they are the intended recipient of an incoming message. The MAV_COMP_ID_ALL value is used to indicate messages that must be processed by all components.       When creating new entries, components that can have multiple instances (e.g. cameras, servos etc.) should be allocated sequential values. An appropriate number of values should be left free after these components to allow the number of instances to be expanded.
    /// </summary>
    public enum MavComponent { 

        /// <summary> Target id (target_component) used to broadcast messages to all components of the receiving system. Components should attempt to process messages with this component ID and forward to components on any other interfaces. Note: This is not a valid *source* component id for a message. </summary>
        MavCompIdAll = 0, 

        /// <summary> System flight controller component ('autopilot'). Only one autopilot is expected in a particular system. </summary>
        MavCompIdAutopilot1 = 1, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser1 = 25, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser2 = 26, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser3 = 27, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser4 = 28, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser5 = 29, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser6 = 30, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser7 = 31, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser8 = 32, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser9 = 33, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser10 = 34, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser11 = 35, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser12 = 36, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser13 = 37, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser14 = 38, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser15 = 39, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser16 = 40, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser17 = 41, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser18 = 42, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser19 = 43, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser20 = 44, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser21 = 45, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser22 = 46, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser23 = 47, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser24 = 48, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser25 = 49, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser26 = 50, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser27 = 51, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser28 = 52, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser29 = 53, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser30 = 54, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser31 = 55, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser32 = 56, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser33 = 57, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser34 = 58, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser35 = 59, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser36 = 60, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser37 = 61, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser38 = 62, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser39 = 63, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser40 = 64, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser41 = 65, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser42 = 66, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser43 = 67, 

        /// <summary> Telemetry radio (e.g. SiK radio, or other component that emits RADIO_STATUS messages). </summary>
        MavCompIdTelemetryRadio = 68, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser45 = 69, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser46 = 70, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser47 = 71, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser48 = 72, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser49 = 73, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser50 = 74, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser51 = 75, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser52 = 76, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser53 = 77, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser54 = 78, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser55 = 79, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser56 = 80, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser57 = 81, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser58 = 82, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser59 = 83, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser60 = 84, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser61 = 85, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser62 = 86, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser63 = 87, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser64 = 88, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser65 = 89, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser66 = 90, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser67 = 91, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser68 = 92, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser69 = 93, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser70 = 94, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser71 = 95, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser72 = 96, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser73 = 97, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser74 = 98, 

        /// <summary> Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network. </summary>
        MavCompIdUser75 = 99, 

        /// <summary> Camera #1. </summary>
        MavCompIdCamera = 100, 

        /// <summary> Camera #2. </summary>
        MavCompIdCamera2 = 101, 

        /// <summary> Camera #3. </summary>
        MavCompIdCamera3 = 102, 

        /// <summary> Camera #4. </summary>
        MavCompIdCamera4 = 103, 

        /// <summary> Camera #5. </summary>
        MavCompIdCamera5 = 104, 

        /// <summary> Camera #6. </summary>
        MavCompIdCamera6 = 105, 

        /// <summary> Servo #1. </summary>
        MavCompIdServo1 = 140, 

        /// <summary> Servo #2. </summary>
        MavCompIdServo2 = 141, 

        /// <summary> Servo #3. </summary>
        MavCompIdServo3 = 142, 

        /// <summary> Servo #4. </summary>
        MavCompIdServo4 = 143, 

        /// <summary> Servo #5. </summary>
        MavCompIdServo5 = 144, 

        /// <summary> Servo #6. </summary>
        MavCompIdServo6 = 145, 

        /// <summary> Servo #7. </summary>
        MavCompIdServo7 = 146, 

        /// <summary> Servo #8. </summary>
        MavCompIdServo8 = 147, 

        /// <summary> Servo #9. </summary>
        MavCompIdServo9 = 148, 

        /// <summary> Servo #10. </summary>
        MavCompIdServo10 = 149, 

        /// <summary> Servo #11. </summary>
        MavCompIdServo11 = 150, 

        /// <summary> Servo #12. </summary>
        MavCompIdServo12 = 151, 

        /// <summary> Servo #13. </summary>
        MavCompIdServo13 = 152, 

        /// <summary> Servo #14. </summary>
        MavCompIdServo14 = 153, 

        /// <summary> Gimbal #1. </summary>
        MavCompIdGimbal = 154, 

        /// <summary> Logging component. </summary>
        MavCompIdLog = 155, 

        /// <summary> Automatic Dependent Surveillance-Broadcast (ADS-B) component. </summary>
        MavCompIdAdsb = 156, 

        /// <summary> On Screen Display (OSD) devices for video links. </summary>
        MavCompIdOsd = 157, 

        /// <summary> Generic autopilot peripheral component ID. Meant for devices that do not implement the parameter microservice. </summary>
        MavCompIdPeripheral = 158, 

        /// <summary> Gimbal ID for QX1. </summary>
        MavCompIdQx1Gimbal = 159, 

        /// <summary> FLARM collision alert component. </summary>
        MavCompIdFlarm = 160, 

        /// <summary> Gimbal #2. </summary>
        MavCompIdGimbal2 = 171, 

        /// <summary> Gimbal #3. </summary>
        MavCompIdGimbal3 = 172, 

        /// <summary> Gimbal #4 </summary>
        MavCompIdGimbal4 = 173, 

        /// <summary> Gimbal #5. </summary>
        MavCompIdGimbal5 = 174, 

        /// <summary> Gimbal #6. </summary>
        MavCompIdGimbal6 = 175, 

        /// <summary> Component that can generate/supply a mission flight plan (e.g. GCS or developer API). </summary>
        MavCompIdMissionplanner = 190, 

        /// <summary> Component that lives on the onboard computer (companion computer) and has some generic functionalities, such as settings system parameters and monitoring the status of some processes that don't directly speak mavlink and so on. </summary>
        MavCompIdOnboardComputer = 191, 

        /// <summary> Component that finds an optimal path between points based on a certain constraint (e.g. minimum snap, shortest path, cost, etc.). </summary>
        MavCompIdPathplanner = 195, 

        /// <summary> Component that plans a collision free path between two points. </summary>
        MavCompIdObstacleAvoidance = 196, 

        /// <summary> Component that provides position estimates using VIO techniques. </summary>
        MavCompIdVisualInertialOdometry = 197, 

        /// <summary> Component that manages pairing of vehicle and GCS. </summary>
        MavCompIdPairingManager = 198, 

        /// <summary> Inertial Measurement Unit (IMU) #1. </summary>
        MavCompIdImu = 200, 

        /// <summary> Inertial Measurement Unit (IMU) #2. </summary>
        MavCompIdImu2 = 201, 

        /// <summary> Inertial Measurement Unit (IMU) #3. </summary>
        MavCompIdImu3 = 202, 

        /// <summary> GPS #1. </summary>
        MavCompIdGps = 220, 

        /// <summary> GPS #2. </summary>
        MavCompIdGps2 = 221, 

        /// <summary> Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet). </summary>
        MavCompIdOdidTxrx1 = 236, 

        /// <summary> Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet). </summary>
        MavCompIdOdidTxrx2 = 237, 

        /// <summary> Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet). </summary>
        MavCompIdOdidTxrx3 = 238, 

        /// <summary> Component to bridge MAVLink to UDP (i.e. from a UART). </summary>
        MavCompIdUdpBridge = 240, 

        /// <summary> Component to bridge to UART (i.e. from UDP). </summary>
        MavCompIdUartBridge = 241, 

        /// <summary> Component handling TUNNEL messages (e.g. vendor specific GUI of a component). </summary>
        MavCompIdTunnelNode = 242, 

        /// <summary> Component for handling system messages (e.g. to ARM, takeoff, etc.). </summary>
        MavCompIdSystemControl = 250 };

    /// <summary>
    /// Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries
    /// </summary>
    public enum MavCmd { 

        /// <summary> Request the target system(s) emit a single instance of a specified message (i.e. a 'one-shot' version of MAV_CMD_SET_MESSAGE_INTERVAL). </summary>
        RequestMessage = 512 };


    // ___________________________________________________________________________________


    /// <summary>
    /// The heartbeat message shows that a system or component is present and responding. The type and autopilot fields (along with the message component id), allow the receiving system to treat further messages from this system appropriately (e.g. by laying out the user interface based on the autopilot). This microservice is documented at https://mavlink.io/en/services/heartbeat.html
    /// </summary>
    public class UasHeartbeat: UasMessage
    {
        /// <summary>
        /// A bitfield for use for autopilot-specific flags
        /// </summary>
        public UInt32 CustomMode {
            get { return mCustomMode; }
            set { mCustomMode = value; NotifyUpdated(); }
        }

        /// <summary>
        /// Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
        /// </summary>
        public byte Type {
            get { return mType; }
            set { mType = value; NotifyUpdated(); }
        }

        /// <summary>
        /// Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.
        /// </summary>
        public MavAutopilot Autopilot {
            get { return mAutopilot; }
            set { mAutopilot = value; NotifyUpdated(); }
        }

        /// <summary>
        /// System mode bitmap.
        /// </summary>
        public byte BaseMode {
            get { return mBaseMode; }
            set { mBaseMode = value; NotifyUpdated(); }
        }

        /// <summary>
        /// System status flag.
        /// </summary>
        public byte SystemStatus {
            get { return mSystemStatus; }
            set { mSystemStatus = value; NotifyUpdated(); }
        }

        /// <summary>
        /// MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version
        /// </summary>
        public byte MavlinkVersion {
            get { return mMavlinkVersion; }
            set { mMavlinkVersion = value; NotifyUpdated(); }
        }

        public UasHeartbeat()
        {
            mMessageId = 0;
            CrcExtra = 50;
        }

        internal override void SerializeBody(BinaryWriter s)
        {
            s.Write(mCustomMode);
            s.Write(mType);
            s.Write((byte)mAutopilot);
            s.Write(mBaseMode);
            s.Write(mSystemStatus);
            s.Write(mMavlinkVersion);
        }

        internal override void DeserializeBody(BinaryReader s)
        {
            this.mCustomMode = s.ReadUInt32();
            this.mType = s.ReadByte();
            this.mAutopilot = (MavAutopilot)s.ReadByte();
            this.mBaseMode = s.ReadByte();
            this.mSystemStatus = s.ReadByte();
            this.mMavlinkVersion = s.ReadByte();
        }

        protected override void InitMetadata()
        {
            mMetadata = new UasMessageMetadata() {
                Description = "The heartbeat message shows that a system or component is present and responding. The type and autopilot fields (along with the message component id), allow the receiving system to treat further messages from this system appropriately (e.g. by laying out the user interface based on the autopilot). This microservice is documented at https://mavlink.io/en/services/heartbeat.html"
            };

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "CustomMode",
                Description = "A bitfield for use for autopilot-specific flags",
                NumElements = 1,
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "Type",
                Description = "Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.",
                NumElements = 1,
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "Autopilot",
                Description = "Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.",
                NumElements = 1,
                EnumMetadata = UasSummary.GetEnumMetadata("MavAutopilot"),
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "BaseMode",
                Description = "System mode bitmap.",
                NumElements = 1,
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "SystemStatus",
                Description = "System status flag.",
                NumElements = 1,
            });

            mMetadata.Fields.Add(new UasFieldMetadata() {
                Name = "MavlinkVersion",
                Description = "MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version",
                NumElements = 1,
            });

        }

        private UInt32 mCustomMode;
        private byte mType;
        private MavAutopilot mAutopilot;
        private byte mBaseMode;
        private byte mSystemStatus;
        private byte mMavlinkVersion;
    }


    // ___________________________________________________________________________________


    public class UasSummary
    {
        public static UasMessage CreateFromId(byte id)
        {
            switch (id)
            {
               case 0: return new UasHeartbeat();
               default: return null;
            }
        }

        public static byte GetCrcExtraForId(byte id)
        {
            switch (id)
            {
               case 0: return 50;
               default: return 0;
            }
        }
        private static Dictionary<string, UasEnumMetadata> mEnums;

        public static UasEnumMetadata GetEnumMetadata(string enumName)
        {
            if (mEnums == null) InitEnumMetadata();

            return mEnums[enumName];
        }

        private static void InitEnumMetadata()
        {
            UasEnumMetadata en = null;
            UasEnumEntryMetadata ent = null;
            mEnums = new Dictionary<string, UasEnumMetadata>();

            en = new UasEnumMetadata() {
                Name = "MavAutopilot",
                Description = "Micro air vehicle / autopilot classes. This identifies the individual model.",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 0,
                Name = "Generic",
                Description = "Generic autopilot, full support for everything",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "Reserved",
                Description = "Reserved for future use.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "Slugs",
                Description = "SLUGS autopilot, http://slugsuav.soe.ucsc.edu",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 3,
                Name = "Ardupilotmega",
                Description = "ArduPilot - Plane/Copter/Rover/Sub/Tracker, https://ardupilot.org",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "Openpilot",
                Description = "OpenPilot, http://openpilot.org",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 5,
                Name = "GenericWaypointsOnly",
                Description = "Generic autopilot only supporting simple waypoints",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 6,
                Name = "GenericWaypointsAndSimpleNavigationOnly",
                Description = "Generic autopilot supporting waypoints and other simple navigation commands",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 7,
                Name = "GenericMissionFull",
                Description = "Generic autopilot supporting the full mission command set",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "Invalid",
                Description = "No valid autopilot, e.g. a GCS or other MAVLink component",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 9,
                Name = "Ppz",
                Description = "PPZ UAV - http://nongnu.org/paparazzi",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 10,
                Name = "Udb",
                Description = "UAV Dev Board",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 11,
                Name = "Fp",
                Description = "FlexiPilot",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 12,
                Name = "Px4",
                Description = "PX4 Autopilot - http://px4.io/",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 13,
                Name = "Smaccmpilot",
                Description = "SMACCMPilot - http://smaccmpilot.org",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 14,
                Name = "Autoquad",
                Description = "AutoQuad -- http://autoquad.org",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 15,
                Name = "Armazila",
                Description = "Armazila -- http://armazila.com",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 16,
                Name = "Aerob",
                Description = "Aerob -- http://aerob.ru",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 17,
                Name = "Asluav",
                Description = "ASLUAV autopilot -- http://www.asl.ethz.ch",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 18,
                Name = "Smartap",
                Description = "SmartAP Autopilot - http://sky-drones.com",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 19,
                Name = "Airrails",
                Description = "AirRails - http://uaventure.com",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavType",
                Description = "MAVLINK component type reported in HEARTBEAT message. Flight controllers must report the type of the vehicle on which they are mounted (e.g. MAV_TYPE_OCTOROTOR). All other components must report a value appropriate for their type (e.g. a camera must use MAV_TYPE_CAMERA).",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 0,
                Name = "Generic",
                Description = "Generic micro air vehicle",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "FixedWing",
                Description = "Fixed wing aircraft.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "Quadrotor",
                Description = "Quadrotor",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 3,
                Name = "Coaxial",
                Description = "Coaxial helicopter",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "Helicopter",
                Description = "Normal helicopter with tail rotor.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 5,
                Name = "AntennaTracker",
                Description = "Ground installation",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 6,
                Name = "Gcs",
                Description = "Operator control unit / ground control station",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 7,
                Name = "Airship",
                Description = "Airship, controlled",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "FreeBalloon",
                Description = "Free balloon, uncontrolled",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 9,
                Name = "Rocket",
                Description = "Rocket",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 10,
                Name = "GroundRover",
                Description = "Ground rover",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 11,
                Name = "SurfaceBoat",
                Description = "Surface vessel, boat, ship",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 12,
                Name = "Submarine",
                Description = "Submarine",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 13,
                Name = "Hexarotor",
                Description = "Hexarotor",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 14,
                Name = "Octorotor",
                Description = "Octorotor",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 15,
                Name = "Tricopter",
                Description = "Tricopter",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 16,
                Name = "FlappingWing",
                Description = "Flapping wing",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 17,
                Name = "Kite",
                Description = "Kite",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 18,
                Name = "OnboardController",
                Description = "Onboard companion controller",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 19,
                Name = "VtolDuorotor",
                Description = "Two-rotor VTOL using control surfaces in vertical operation in addition. Tailsitter.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 20,
                Name = "VtolQuadrotor",
                Description = "Quad-rotor VTOL using a V-shaped quad config in vertical operation. Tailsitter.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 21,
                Name = "VtolTiltrotor",
                Description = "Tiltrotor VTOL",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 22,
                Name = "VtolReserved2",
                Description = "VTOL reserved 2",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 23,
                Name = "VtolReserved3",
                Description = "VTOL reserved 3",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 24,
                Name = "VtolReserved4",
                Description = "VTOL reserved 4",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 25,
                Name = "VtolReserved5",
                Description = "VTOL reserved 5",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 26,
                Name = "Gimbal",
                Description = "Gimbal",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 27,
                Name = "Adsb",
                Description = "ADSB system",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 28,
                Name = "Parafoil",
                Description = "Steerable, nonrigid airfoil",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 29,
                Name = "Dodecarotor",
                Description = "Dodecarotor",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 30,
                Name = "Camera",
                Description = "Camera",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 31,
                Name = "ChargingStation",
                Description = "Charging station",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 32,
                Name = "Flarm",
                Description = "FLARM collision avoidance system",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 33,
                Name = "Servo",
                Description = "Servo",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 34,
                Name = "Odid",
                Description = "Open Drone ID. See https://mavlink.io/en/services/opendroneid.html.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 35,
                Name = "Decarotor",
                Description = "Decarotor",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavModeFlag",
                Description = "These flags encode the MAV mode.",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 128,
                Name = "SafetyArmed",
                Description = "0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 64,
                Name = "ManualInputEnabled",
                Description = "0b01000000 remote control input is enabled.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 32,
                Name = "HilEnabled",
                Description = "0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 16,
                Name = "StabilizeEnabled",
                Description = "0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "GuidedEnabled",
                Description = "0b00001000 guided mode enabled, system flies waypoints / mission items.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "AutoEnabled",
                Description = "0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "TestEnabled",
                Description = "0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "CustomModeEnabled",
                Description = "0b00000001 Reserved for future use.",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavModeFlagDecodePosition",
                Description = "These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not.",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 128,
                Name = "Safety",
                Description = "First bit:  10000000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 64,
                Name = "Manual",
                Description = "Second bit: 01000000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 32,
                Name = "Hil",
                Description = "Third bit:  00100000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 16,
                Name = "Stabilize",
                Description = "Fourth bit: 00010000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "Guided",
                Description = "Fifth bit:  00001000",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "Auto",
                Description = "Sixth bit:   00000100",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "Test",
                Description = "Seventh bit: 00000010",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "CustomMode",
                Description = "Eighth bit: 00000001",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavState",
                Description = "",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 0,
                Name = "Uninit",
                Description = "Uninitialized system, state is unknown.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "Boot",
                Description = "System is booting up.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 2,
                Name = "Calibrating",
                Description = "System is calibrating and not flight-ready.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 3,
                Name = "Standby",
                Description = "System is grounded and on standby. It can be launched any time.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 4,
                Name = "Active",
                Description = "System is active and might be already airborne. Motors are engaged.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 5,
                Name = "Critical",
                Description = "System is in a non-normal flight mode. It can however still navigate.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 6,
                Name = "Emergency",
                Description = "System is in a non-normal flight mode. It lost control over parts or over the whole airframe. It is in mayday and going down.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 7,
                Name = "Poweroff",
                Description = "System just initialized its power-down sequence, will shut down now.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 8,
                Name = "FlightTermination",
                Description = "System is terminating itself.",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavComponent",
                Description = "Component ids (values) for the different types and instances of onboard hardware/software that might make up a MAVLink system (autopilot, cameras, servos, GPS systems, avoidance systems etc.).       Components must use the appropriate ID in their source address when sending messages. Components can also use IDs to determine if they are the intended recipient of an incoming message. The MAV_COMP_ID_ALL value is used to indicate messages that must be processed by all components.       When creating new entries, components that can have multiple instances (e.g. cameras, servos etc.) should be allocated sequential values. An appropriate number of values should be left free after these components to allow the number of instances to be expanded.",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 0,
                Name = "MavCompIdAll",
                Description = "Target id (target_component) used to broadcast messages to all components of the receiving system. Components should attempt to process messages with this component ID and forward to components on any other interfaces. Note: This is not a valid *source* component id for a message.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 1,
                Name = "MavCompIdAutopilot1",
                Description = "System flight controller component ('autopilot'). Only one autopilot is expected in a particular system.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 25,
                Name = "MavCompIdUser1",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 26,
                Name = "MavCompIdUser2",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 27,
                Name = "MavCompIdUser3",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 28,
                Name = "MavCompIdUser4",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 29,
                Name = "MavCompIdUser5",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 30,
                Name = "MavCompIdUser6",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 31,
                Name = "MavCompIdUser7",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 32,
                Name = "MavCompIdUser8",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 33,
                Name = "MavCompIdUser9",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 34,
                Name = "MavCompIdUser10",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 35,
                Name = "MavCompIdUser11",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 36,
                Name = "MavCompIdUser12",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 37,
                Name = "MavCompIdUser13",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 38,
                Name = "MavCompIdUser14",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 39,
                Name = "MavCompIdUser15",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 40,
                Name = "MavCompIdUser16",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 41,
                Name = "MavCompIdUser17",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 42,
                Name = "MavCompIdUser18",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 43,
                Name = "MavCompIdUser19",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 44,
                Name = "MavCompIdUser20",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 45,
                Name = "MavCompIdUser21",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 46,
                Name = "MavCompIdUser22",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 47,
                Name = "MavCompIdUser23",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 48,
                Name = "MavCompIdUser24",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 49,
                Name = "MavCompIdUser25",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 50,
                Name = "MavCompIdUser26",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 51,
                Name = "MavCompIdUser27",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 52,
                Name = "MavCompIdUser28",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 53,
                Name = "MavCompIdUser29",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 54,
                Name = "MavCompIdUser30",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 55,
                Name = "MavCompIdUser31",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 56,
                Name = "MavCompIdUser32",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 57,
                Name = "MavCompIdUser33",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 58,
                Name = "MavCompIdUser34",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 59,
                Name = "MavCompIdUser35",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 60,
                Name = "MavCompIdUser36",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 61,
                Name = "MavCompIdUser37",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 62,
                Name = "MavCompIdUser38",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 63,
                Name = "MavCompIdUser39",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 64,
                Name = "MavCompIdUser40",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 65,
                Name = "MavCompIdUser41",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 66,
                Name = "MavCompIdUser42",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 67,
                Name = "MavCompIdUser43",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 68,
                Name = "MavCompIdTelemetryRadio",
                Description = "Telemetry radio (e.g. SiK radio, or other component that emits RADIO_STATUS messages).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 69,
                Name = "MavCompIdUser45",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 70,
                Name = "MavCompIdUser46",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 71,
                Name = "MavCompIdUser47",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 72,
                Name = "MavCompIdUser48",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 73,
                Name = "MavCompIdUser49",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 74,
                Name = "MavCompIdUser50",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 75,
                Name = "MavCompIdUser51",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 76,
                Name = "MavCompIdUser52",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 77,
                Name = "MavCompIdUser53",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 78,
                Name = "MavCompIdUser54",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 79,
                Name = "MavCompIdUser55",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 80,
                Name = "MavCompIdUser56",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 81,
                Name = "MavCompIdUser57",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 82,
                Name = "MavCompIdUser58",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 83,
                Name = "MavCompIdUser59",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 84,
                Name = "MavCompIdUser60",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 85,
                Name = "MavCompIdUser61",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 86,
                Name = "MavCompIdUser62",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 87,
                Name = "MavCompIdUser63",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 88,
                Name = "MavCompIdUser64",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 89,
                Name = "MavCompIdUser65",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 90,
                Name = "MavCompIdUser66",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 91,
                Name = "MavCompIdUser67",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 92,
                Name = "MavCompIdUser68",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 93,
                Name = "MavCompIdUser69",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 94,
                Name = "MavCompIdUser70",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 95,
                Name = "MavCompIdUser71",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 96,
                Name = "MavCompIdUser72",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 97,
                Name = "MavCompIdUser73",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 98,
                Name = "MavCompIdUser74",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 99,
                Name = "MavCompIdUser75",
                Description = "Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 100,
                Name = "MavCompIdCamera",
                Description = "Camera #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 101,
                Name = "MavCompIdCamera2",
                Description = "Camera #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 102,
                Name = "MavCompIdCamera3",
                Description = "Camera #3.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 103,
                Name = "MavCompIdCamera4",
                Description = "Camera #4.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 104,
                Name = "MavCompIdCamera5",
                Description = "Camera #5.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 105,
                Name = "MavCompIdCamera6",
                Description = "Camera #6.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 140,
                Name = "MavCompIdServo1",
                Description = "Servo #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 141,
                Name = "MavCompIdServo2",
                Description = "Servo #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 142,
                Name = "MavCompIdServo3",
                Description = "Servo #3.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 143,
                Name = "MavCompIdServo4",
                Description = "Servo #4.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 144,
                Name = "MavCompIdServo5",
                Description = "Servo #5.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 145,
                Name = "MavCompIdServo6",
                Description = "Servo #6.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 146,
                Name = "MavCompIdServo7",
                Description = "Servo #7.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 147,
                Name = "MavCompIdServo8",
                Description = "Servo #8.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 148,
                Name = "MavCompIdServo9",
                Description = "Servo #9.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 149,
                Name = "MavCompIdServo10",
                Description = "Servo #10.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 150,
                Name = "MavCompIdServo11",
                Description = "Servo #11.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 151,
                Name = "MavCompIdServo12",
                Description = "Servo #12.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 152,
                Name = "MavCompIdServo13",
                Description = "Servo #13.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 153,
                Name = "MavCompIdServo14",
                Description = "Servo #14.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 154,
                Name = "MavCompIdGimbal",
                Description = "Gimbal #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 155,
                Name = "MavCompIdLog",
                Description = "Logging component.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 156,
                Name = "MavCompIdAdsb",
                Description = "Automatic Dependent Surveillance-Broadcast (ADS-B) component.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 157,
                Name = "MavCompIdOsd",
                Description = "On Screen Display (OSD) devices for video links.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 158,
                Name = "MavCompIdPeripheral",
                Description = "Generic autopilot peripheral component ID. Meant for devices that do not implement the parameter microservice.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 159,
                Name = "MavCompIdQx1Gimbal",
                Description = "Gimbal ID for QX1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 160,
                Name = "MavCompIdFlarm",
                Description = "FLARM collision alert component.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 171,
                Name = "MavCompIdGimbal2",
                Description = "Gimbal #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 172,
                Name = "MavCompIdGimbal3",
                Description = "Gimbal #3.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 173,
                Name = "MavCompIdGimbal4",
                Description = "Gimbal #4",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 174,
                Name = "MavCompIdGimbal5",
                Description = "Gimbal #5.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 175,
                Name = "MavCompIdGimbal6",
                Description = "Gimbal #6.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 190,
                Name = "MavCompIdMissionplanner",
                Description = "Component that can generate/supply a mission flight plan (e.g. GCS or developer API).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 191,
                Name = "MavCompIdOnboardComputer",
                Description = "Component that lives on the onboard computer (companion computer) and has some generic functionalities, such as settings system parameters and monitoring the status of some processes that don't directly speak mavlink and so on.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 195,
                Name = "MavCompIdPathplanner",
                Description = "Component that finds an optimal path between points based on a certain constraint (e.g. minimum snap, shortest path, cost, etc.).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 196,
                Name = "MavCompIdObstacleAvoidance",
                Description = "Component that plans a collision free path between two points.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 197,
                Name = "MavCompIdVisualInertialOdometry",
                Description = "Component that provides position estimates using VIO techniques.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 198,
                Name = "MavCompIdPairingManager",
                Description = "Component that manages pairing of vehicle and GCS.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 200,
                Name = "MavCompIdImu",
                Description = "Inertial Measurement Unit (IMU) #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 201,
                Name = "MavCompIdImu2",
                Description = "Inertial Measurement Unit (IMU) #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 202,
                Name = "MavCompIdImu3",
                Description = "Inertial Measurement Unit (IMU) #3.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 220,
                Name = "MavCompIdGps",
                Description = "GPS #1.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 221,
                Name = "MavCompIdGps2",
                Description = "GPS #2.",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 236,
                Name = "MavCompIdOdidTxrx1",
                Description = "Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 237,
                Name = "MavCompIdOdidTxrx2",
                Description = "Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 238,
                Name = "MavCompIdOdidTxrx3",
                Description = "Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 240,
                Name = "MavCompIdUdpBridge",
                Description = "Component to bridge MAVLink to UDP (i.e. from a UART).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 241,
                Name = "MavCompIdUartBridge",
                Description = "Component to bridge to UART (i.e. from UDP).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 242,
                Name = "MavCompIdTunnelNode",
                Description = "Component handling TUNNEL messages (e.g. vendor specific GUI of a component).",
            };
            en.Entries.Add(ent);

            ent = new UasEnumEntryMetadata() {
                Value = 250,
                Name = "MavCompIdSystemControl",
                Description = "Component for handling system messages (e.g. to ARM, takeoff, etc.).",
            };
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
            en = new UasEnumMetadata() {
                Name = "MavCmd",
                Description = "Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries",
            };

            ent = new UasEnumEntryMetadata() {
                Value = 512,
                Name = "RequestMessage",
                Description = "Request the target system(s) emit a single instance of a specified message (i.e. a 'one-shot' version of MAV_CMD_SET_MESSAGE_INTERVAL).",
            };
            ent.Params = new List<String>();
            ent.Params.Add("The MAVLink message ID of the requested message.");
            ent.Params.Add("Use for index ID, if required. Otherwise, the use of this parameter (if any) must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).");
            ent.Params.Add("Target address for requested message (if message has target address fields). 0: Flight-stack default, 1: address of requestor, 2: broadcast.");
            en.Entries.Add(ent);

            mEnums.Add(en.Name, en);
        }
    }

}
>>>>>>> f87166dbc6562111662283ba9b9b3b865afc5862
